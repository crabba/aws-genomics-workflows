AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  (WWPS-GLS-WF-LT) Creates an EC2 Launch Template for AWS Batch based
  genomics workflows

Mappings:
  ScratchMountPointMap:
    step-functions:
      mountpoint: "/var/lib/docker"
    cromwell:
      mountpoint: "/cromwell_root"
    nextflow:
      mountpoint: "/var/lib/docker"
  TagMap:
    default:
      architecture: "genomics-workflows"
      solution: "default"
      tags:
        - Key: "architecture"
          Value: "genomics-workflows"
        - Key: "solution"
          Value: "default"
  ECSAdditionsMap:
    step-functions:
      additions: |-
        - stop ecs
        - service docker stop
        - cp -au /var/lib/docker /var/lib/docker.bk
        - rm -rf /var/lib/docker/*
        - cd /opt && wget $artifactRootUrl/get-amazon-ebs-autoscale.sh
        - sh /opt/get-amazon-ebs-autoscale.sh
        - sh /opt/amazon-ebs-autoscale/install.sh $scratchPath /dev/sdc 2>&1 > /var/log/ebs-autoscale-install.log
        - sed -i 's+OPTIONS=.*+OPTIONS="--storage-driver btrfs"+g' /etc/sysconfig/docker-storage
        - cp -au /var/lib/docker.bk/* /var/lib/docker
        - cd /opt && wget $artifactRootUrl/aws-ecs-additions.tgz && tar -xzf aws-ecs-additions.tgz
        - sh /opt/ecs-additions/ecs-additions-step-functions.sh
        - service docker start
        - start ecs

    cromwell:
      additions: |-
        - cd /opt && wget $artifactRootUrl/get-amazon-ebs-autoscale.sh
        - sh /opt/get-amazon-ebs-autoscale.sh
        - sh /opt/amazon-ebs-autoscale/install.sh $scratchPath /dev/sdc 2>&1 > /var/log/ebs-autoscale-install.log
        - cd /opt && wget $artifactRootUrl/aws-ecs-additions.tgz && tar -xzf aws-ecs-additions.tgz
        - sh /opt/ecs-additions/ecs-additions-cromwell.sh

    nextflow:
      additions: |-
        - stop ecs
        - service docker stop
        - cp -au /var/lib/docker /var/lib/docker.bk
        - rm -rf /var/lib/docker/*
        - cd /opt && wget $artifactRootUrl/get-amazon-ebs-autoscale.sh
        - sh /opt/get-amazon-ebs-autoscale.sh
        - sh /opt/amazon-ebs-autoscale/install.sh $scratchPath /dev/sdc 2>&1 > /var/log/ebs-autoscale-install.log
        - sed -i 's+OPTIONS=.*+OPTIONS="--storage-driver btrfs"+g' /etc/sysconfig/docker-storage
        - cp -au /var/lib/docker.bk/* /var/lib/docker
        - cd /opt && wget $artifactRootUrl/aws-ecs-additions.tgz && tar -xzf aws-ecs-additions.tgz
        - sh /opt/ecs-additions/ecs-additions-nextflow.sh
        - export my_inst_id=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
        - '[ ! -s /usr/local/amazon-ebs-autoscale/bin/ebs-autoscale ] && echo "ERROR Unable to find ebs-autoscale, shutdown ${my_inst_id}" 1>&2'
        - '[ ! -s /usr/local/amazon-ebs-autoscale/bin/ebs-autoscale ] && shutdown -P now'
        - '[ ! -s /opt/ecs-additions/ecs-additions-nextflow.sh ] && echo "ERROR Unable to find ecs-additions-nextflow.sh, shutdown ${my_inst_id}" 1>&2'
        - '[ ! -s /opt/ecs-additions/ecs-additions-nextflow.sh ] && shutdown -P now'
        - service docker start
        - start ecs

Parameters:
  LaunchTemplateNamePrefix:
    Type: String
    Default: genomics-workflow
    Description: Name of the launch template. This will be made unique using the Stack ID.
  ScratchVolumeSize:
    Type: Number
    Default: 20
    Description: The initial size of the scratch volume (GB)
  DockerImageAndMetadataVolumeSize:
    Type: Number
    Default: 75
    Description: The size of the volume Docker will use for image and metadata storage (GB)
  WorkflowOrchestrator:
    Type: String
    Description: The workflow orchestration engine you will use
    Default: step-functions
    AllowedValues:
      - step-functions
      - cromwell
      - nextflow
  ArtifactRootUrl:
    Type: String
    Default: https://s3.amazonaws.com/aws-genomics-workflows/artifacts
    Description: >-
      Root URL for where artifacts / additions scripts are stored

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - WorkflowOrchestrator
          - LaunchTemplateNamePrefix
      - Label:
          default: "Optional"
        Parameters:
          - ScratchVolumeSize
          - DockerImageAndMetadataVolumeSize

Resources:
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ["-", [!Ref LaunchTemplateNamePrefix, !Select [2, !Split ["/", !Ref "AWS::StackId" ]]]]
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: architecture
              Value: !FindInMap ["TagMap", "default", "architecture"]
            - Key: solution
              Value: !Ref WorkflowOrchestrator
        BlockDeviceMappings:
          - Ebs:
              DeleteOnTermination: True
              VolumeSize: 50
              VolumeType: gp2
            DeviceName: /dev/xvda
          - Ebs:
              Encrypted: True
              DeleteOnTermination: True
              VolumeSize: !Ref DockerImageAndMetadataVolumeSize
              VolumeType: gp2
            DeviceName: /dev/xvdcz
          - Ebs:
              Encrypted: True
              DeleteOnTermination: True
              VolumeSize: !Ref ScratchVolumeSize
              VolumeType: gp2
            DeviceName: /dev/sdc
        UserData:
          Fn::Base64: !Sub
            - |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/cloud-config; charset="us-ascii"

              packages:
              - awslogs
              - jq
              - amazon-ssm-agent

              runcmd:
              - start amazon-ssm-agent

              write_files:
              - path: /etc/awslogs/awslogs.conf
                content: |
                  [general]
                  state_file = /var/lib/awslogs/agent-state

                  [/var/log/dmesg]
                  file = /var/log/dmesg
                  log_group_name = /ecs/{cluster}/instances#ecs#dmesg
                  log_stream_name = {container_instance_id}

                  [/var/log/messages]
                  file = /var/log/messages
                  log_group_name = /ecs/{cluster}/instances#ecs#messages
                  log_stream_name = {container_instance_id}
                  datetime_format = %b %d %H:%M:%S

                  [/var/log/docker]
                  file = /var/log/docker
                  log_group_name = /ecs/{cluster}/instances#ecs#docker
                  log_stream_name = {container_instance_id}
                  datetime_format = %Y-%m-%dT%H:%M:%S.%f

                  [/var/log/ecs/ecs-init.log]
                  file = /var/log/ecs/ecs-init.log*
                  log_group_name = /ecs/{cluster}/instances#ecs#ecs-init.log
                  log_stream_name = {container_instance_id}
                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                  [/var/log/ecs/ecs-agent.log]
                  file = /var/log/ecs/ecs-agent.log*
                  log_group_name = /ecs/{cluster}/instances#ecs#ecs-agent.log
                  log_stream_name = {container_instance_id}
                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                  [/var/log/ecs/audit.log]
                  file = /var/log/ecs/audit.log*
                  log_group_name = /ecs/{cluster}/instances#ecs#audit.log
                  log_stream_name = {container_instance_id}
                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                  [/var/log/cloud-init.log]
                  file = /var/log/cloud-init-output.log*
                  log_group_name = /ecs/{cluster}/instances#ecs#cloud-init.log
                  log_stream_name = {container_instance_id}
                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                  [/var/log/cloud-init-output.log]
                  file = /var/log/cloud-init-output.log*
                  log_group_name = /ecs/{cluster}/instances#ecs#cloud-init-output.log
                  log_stream_name = {container_instance_id}
                  datetime_format = %Y-%m-%dT%H:%M:%SZ

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              #!/bin/bash -e

              # Install awslogs and the jq JSON parser
              yum install -y awslogs jq

              # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
              region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
              sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

              cat > /etc/init/ecs-awslogs.conf <<- 'EOF'
              description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
              author "Amazon Web Services"
              start on started ecs

              script
                exec 2>>/var/log/ecs/cloudwatch-logs-start.log
                set -x

                until curl -s http://localhost:51678/v1/metadata
                do
                  sleep 1
                done

                # Grab the cluster and container instance ARN from instance metadata
                cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
                container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                container_instance_id="${instance_id}-${container_instance_id}"

                # Replace the cluster name and container instance ID placeholders with the actual values
                sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
                sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf

                # Start and enable the CloudWatch Logs agent
                service awslogs start
                chkconfig awslogs on

              end script
              EOF

              start ecs-awslogs

              echo "ECS_ENABLE_SPOT_INSTANCE_DRAINING=true" >> /etc/ecs/ecs.config

              --==BOUNDARY==
              Content-Type: text/cloud-config; charset="us-ascii"

              packages:
              - jq
              - btrfs-progs
              - sed
              - wget
              - git
              - amazon-ssm-agent
              - unzip

              runcmd:
              - curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
              - unzip -q /tmp/awscliv2.zip -d /tmp
              - /tmp/aws/install
              - export scratchPath="${ScratchMountPoint}"
              - export artifactRootUrl="${ArtifactRootUrl}"
              - start amazon-ssm-agent

              - export my_instance_id=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
              - command -v aws || echo "ERROR aws executable not found - shutting down ${my_instance_id}"
              - command -v aws || shutdown -P now

              ${ECSAdditions}

              --==BOUNDARY==--
            - ECSAdditions:
                Fn::FindInMap:
                  - ECSAdditionsMap
                  - !Ref WorkflowOrchestrator
                  - additions
              ScratchMountPoint:
                Fn::FindInMap:
                  - ScratchMountPointMap
                  - !Ref WorkflowOrchestrator
                  - mountpoint

Outputs:
  LaunchTemplateId:
    Description: >-
      EC2 Launch Template ID to use when creating AWS Batch compute environments
      for genomics workflows
    Value: !Ref EC2LaunchTemplate
